&ACCESS RVO
&REL 11
&COMMENT PLC on control
DEF  SPS ( )
  ;FOLD DECLARATIONS
  ;FOLD BASISTECH DECL
  ;Automatik extern
  DECL STATE_T STAT
  DECL MODUS_T MODE
  ;ENDFOLD (BASISTECH DECL)
  ;FOLD USER DECL
  ; Please insert user defined declarations

  ;ENDFOLD (USER DECL)
  ;ENDFOLD (DECLARATIONS)
INT I
  ;FOLD INI
  ;FOLD DEFAULT MSG_T
  $MSG_T={MSG_T: VALID FALSE,RELEASE FALSE,TYP #NOTIFY,MODUL[] " ",KEY[] " ",PARAM_TYP #VALUE,PARAM[] " ",DLG_FORMAT[] " ",ANSWER 0}
  ;ENDFOLD (DEFAULT MSG_T)
  ;FOLD AUTOEXT INIT
  INTERRUPT DECL 91 WHEN $PRO_STATE1==#P_FREE DO RESET_OUT ()
  INTERRUPT ON 91
  $LOOP_MSG[]="                                                            "
  MODE=#SYNC
  $H_POS=$H_POS
  ;Automatik extern
  IF $MODE_OP==#EX THEN
    CWRITE($CMD,STAT,MODE,"RUN /R1/CELL()")
  ENDIF
  ;ENDFOLD (AUTOEXT INIT)
  ;FOLD USER INIT
  ; Please insert user defined initialization commands

  ;ENDFOLD (USER INIT)
  ;ENDFOLD (INI)

  LOOP
;FOLD KUKA.TP.MASTERREFERENCE.PLC.BEGIN
CancelBrkTest()
if $power_fail then
  $MasteringTest_Start=FALSE
endif
;ENDFOLD KUKA.TP.MASTERREFERENCE.PLC.END
     WAIT FOR NOT($POWER_FAIL)
     TORQUE_MONITORING()
    ;FOLD USER PLC
    ;Make your modifications here

; IF CONTADOR_CAPAS_DARSENA1 >= MaximoCapas then
; ERRROR
; ENDIF


;FOLD CONTADOR_SACOS Darsena 1
IF (CAPAYPOSICION_ACTUAL_1==(MaximaPosicion+1)) THEN
    CAPA_ACTUAL_DARSENA1=1 ;capa par
    CONTADOR_SACOS_DARSENA1=0
    CONTADOR_CAPAS_DARSENA1=CONTADOR_CAPAS_DARSENA1+1
ENDIF

IF (CAPAYPOSICION_ACTUAL_1==(MaximaPosicion+11)) THEN
    CAPA_ACTUAL_DARSENA1=0 ;capa impar
    CONTADOR_SACOS_DARSENA1=0
    CONTADOR_CAPAS_DARSENA1=CONTADOR_CAPAS_DARSENA1+1
ENDIF

CAPAYPOSICION_ACTUAL_1=(CAPA_ACTUAL_DARSENA1)*10 + (CONTADOR_SACOS_DARSENA1+1)

IF (  CONTADOR_CAPAS_DARSENA1>=MaximoCapas) then
  LIMITE_CAPAS_DARSENA1=TRUE
  CONTADOR_CAPAS_DARSENA1=0
ENDIF
;ENDFOLD CONTADOR_SACOS Darsena 1



;FOLD CONTADOR_SACOS Darsena 2
IF (CAPAYPOSICION_ACTUAL_2==(MaximaPosicion+1)) THEN
    CAPA_ACTUAL_DARSENA2=1 ;capa par
    CONTADOR_SACOS_DARSENA2=0
    CONTADOR_CAPAS_DARSENA2=CONTADOR_CAPAS_DARSENA2+1
ENDIF

IF (CAPAYPOSICION_ACTUAL_2==(MaximaPosicion+11)) THEN
    CAPA_ACTUAL_DARSENA2=0 ;capa impar
    CONTADOR_SACOS_DARSENA2=0
    CONTADOR_CAPAS_DARSENA2=CONTADOR_CAPAS_DARSENA2+1
ENDIF

CAPAYPOSICION_ACTUAL_2=(CAPA_ACTUAL_DARSENA2)*10 + (CONTADOR_SACOS_DARSENA2+1)


IF (CONTADOR_CAPAS_DARSENA2>=MaximoCapas) then
  LIMITE_CAPAS_DARSENA2=TRUE
  CONTADOR_CAPAS_DARSENA1=0
ENDIF

;ENDFOLD CONTADOR_SACOS Darsena 2


    ;ENDFOLD (USER PLC)
  ENDLOOP
  ;FOLD ;%{H}
  ;FOLD
END
  ;ENDFOLD


DEF  RESET_OUT ( )
  INT N
  $LOOP_MSG[]="                                                            "
  IF REFLECT_PROG_NR == 1 THEN
    FOR N = 0 TO PGNO_LENGTH - 1
      $OUT[PGNO_FBIT_REFL + N] = FALSE
    ENDFOR
  ENDIF
  IF (PGNO_REQ>0) THEN
    $OUT[PGNO_REQ]=FALSE
  ELSE
    IF (PGNO_REQ<0) THEN
      $OUT[-PGNO_REQ]=TRUE
    ENDIF
  ENDIF
END

;FOLD KUKA.TP.BRAKETEST.PLC.SUB.BEGIN
DEF CancelBrkTest()
  Int Ret
  Int IntArray[3]
  Real RealArray[1]
  if Not(Braketest_Work) Or (Not($PRO_STATE1==#P_FREE) And Not($PRO_STATE1==#P_RESET)) then
    Return
  endif
  Braketest_Work=FALSE
  Ret=MD_CMD("BRKTST", "CANCELBRAKETEST", IntArray[], RealArray[])
END
;ENDFOLD KUKA.TP.BRAKETEST.PLC.SUB.END
;FOLD USER SUBROUTINE
; Integrate your user defined subroutines

;ENDFOLD (USER SUBROUTINE)
;ENDFOLD
